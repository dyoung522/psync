#!/bin/bash

out() { $STDOUT && echo $*; }
die() { out $*; exit 1; }

sync_dir() {
  DIR=$1
  NUM=$2
  VERBOSE=$($STDOUT && echo 'verbose' || echo 'quiet')
  BASENAME=$(basename $DIR)
  DATADIR="/data/$BASENAME"

  [[ -n "$(ls $DIR/.NOSYNC* 2>/dev/null)" ]] && return
  [[ -e "$DIR/.KILLSYNC" ]] && die "Aborting, KILLSYNC found."

  out "syncing $NUM change(s) for $BASENAME on $(date)..."
  rsync -are "ssh -l dcyoung"          \
    --$VERBOSE                         \
    --delete --delete-during           \
    --exclude-from "${HOME}/.gitignore"\
    --exclude-from "${DIR}/.gitignore" \
    --exclude "lib"                    \
    --exclude "dist"                   \
    --exclude ".env"                   \
    --exclude ".bundle/"               \
    --exclude "config/*.yml"           \
    --exclude "vendor/cache/"          \
    --exclude "*.tgz"                  \
      $DIR/ dyoung.vm:$DATADIR || die "Error occurred during sync"

  out -e "complete"
  afplay "/System/Library/Sounds/Morse.aiff"
}

BACKGROUND=false
[[ -t 1 ]] && STDOUT=true || STDOUT=false

for OPT in $@ ; do
  case $OPT in
    '--verbose'    | '-v' ) STDOUT=true  ;;
    '--quiet'      | '-q' ) STDOUT=false ;;
    '--background' | '-b' ) STDOUT=false; BACKGROUND=true ;;
    * ) DIRS+=" $OPT" ;;
  esac
  shift
done

# Use the current directory if one wasn't provided.
[[ -z "$DIRS" ]] && DIRS=$PWD

for DIR in $DIRS ; do
  PROJECT=$(basename $DIR)

  if [[ ! -d "$DIR" ]] ; then
    # Try looking in our Projects directory
    DIR="$(eval echo "~/Projects/$DIR")"

    out "Hmm... trying $DIR"

    # Die if we still can't find it.
    [[ -d "$DIR" ]] || die "Nope, cannot find a working directory for $PROJECT"
  fi

  sync_dir $DIR initial

  out -e "\nWatching for changes in $DIR"
  ( fswatch -o -l5 --exclude ".idea" "$DIR" | while read NUM ; do sync_dir $DIR $NUM; done || die "an error occurred while syncing $DIR" )&
done

[[ $BACKGROUND ]] && wait

